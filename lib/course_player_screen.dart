import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart' show rootBundle;
import 'package:collection/collection.dart';
import 'logic/lidraughts_russian.dart'
    show
        Board,
        Piece,
        PieceColor,
        PieceType,
        DraughtsLogic,
        Move,
        BoardApplyMove;
import 'models/course.dart';
import 'models/pos.dart';
import 'logic/pdn_utils.dart';
import 'widgets/board.dart';

class CoursePlayerScreen extends StatefulWidget {
  final Course course;

  const CoursePlayerScreen({Key? key, required this.course}) : super(key: key);

  @override
  State<CoursePlayerScreen> createState() => _CoursePlayerScreenState();
}

class _CoursePlayerScreenState extends State<CoursePlayerScreen> {
  Course? course;
  Board board = Board.initial();
  int currentStep = 0;
  bool showHint = false;
  String errorMessage = '';
  bool isLoading = true;
  bool isGameOver = false;
  String gameResult = '';
  Pos? selectedPos;
  PieceColor userColor = PieceColor.white;

  @override
  void initState() {
    super.initState();
    board = Board.initial();
    currentStep = 0;
    userColor = PieceColor.white;
    _loadCourse();
  }

  Future<void> _loadCourse() async {
    try {
      setState(() {
        course = widget.course;
        isLoading = false;
      });
      print('=== –ö–£–†–° –ó–ê–ì–†–£–ñ–ï–ù ===');
      print('–ù–∞–∑–≤–∞–Ω–∏–µ: ${course?.title}');
      print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: ${course?.steps.length}');
      print('–ü–µ—Ä–≤—ã–π —Ö–æ–¥: ${course?.steps.first.side}');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Ö–æ–¥–∞
      if (course != null && course!.steps.isNotEmpty) {
        final firstStep = course!.steps[0];
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –±–µ–ª—ã—Ö, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç –∑–∞ —á–µ—Ä–Ω—ã—Ö
        // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ —á–µ—Ä–Ω—ã—Ö, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç –∑–∞ –±–µ–ª—ã—Ö
        userColor = _sideToColor(firstStep.side) == PieceColor.white
            ? PieceColor.black
            : PieceColor.white;
      }
      print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞–µ—Ç –∑–∞: $userColor');

      // –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞ ‚Äî –∞–≤—Ç–æ—Ö–æ–¥, –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (course != null && course!.steps.isNotEmpty) {
          final step = course!.steps[0];
          if (_sideToColor(step.side) != userColor) {
            print('üîÑ –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ—Ö–æ–¥ –∑–∞ ${step.side}');
            _makeAutoMove();
          } else {
            print('üë§ –ü–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          }
        }
      });
    } catch (e) {
      setState(() {
        errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞: $e';
        isLoading = false;
      });
    }
  }

  // –ü–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–¥–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –∏–∑ –∫—É—Ä—Å–∞
  void _makeNextMoveFromCourse() {
    if (course == null || isGameOver || currentStep >= course!.steps.length)
      return;
    print('üîÑ –í—ã–∑—ã–≤–∞–µ–º –∞–≤—Ç–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–¥–∞');
    _makeAutoMove();
  }

  PieceColor _sideToColor(String side) {
    return side == 'w' ? PieceColor.white : PieceColor.black;
  }

  void _onUserMove(int fromRow, int fromCol, int toRow, int toCol) {
    if (course == null || currentStep >= course!.steps.length) return;

    var expectedStep = course!.steps[currentStep];
    var expectedFrom = pdnToPos(expectedStep.from);
    var expectedTo = pdnToPos(expectedStep.to);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å–∫–∏ –≤ Pos
    final from = Pos(fromCol, fromRow);
    final to = Pos(toCol, toRow);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print('=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –•–û–î ===');
    print('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ö–æ–¥: ${from.x},${from.y} ‚Üí ${to.x},${to.y}');
    print(
        '–û–∂–∏–¥–∞–µ–º—ã–π —Ö–æ–¥: ${expectedFrom.x},${expectedFrom.y} ‚Üí ${expectedTo.x},${expectedTo.y}');
    print('–¢–µ–∫—É—â–∏–π —à–∞–≥: $currentStep, —Å—Ç–æ—Ä–æ–Ω–∞: ${expectedStep.side}');

    final piece = board.pieceAt(from);
    if (piece != null) {
      final possibleMoves = DraughtsLogic.generateMoves(board, piece.color);
      print('–í–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      for (final m in possibleMoves) {
        print('  ${m.from.x},${m.from.y} ‚Üí ${m.to.x},${m.to.y}');
      }
    } else {
      print('‚ùå –ù–µ—Ç —à–∞—à–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${from.x},${from.y}');
    }

    if (from.x == expectedFrom.x &&
        from.y == expectedFrom.y &&
        to.x == expectedTo.x &&
        to.y == expectedTo.y) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥
      print('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥!');
      setState(() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö–æ–¥ –∫ –¥–æ—Å–∫–µ
        if (piece != null) {
          final possibleMoves = DraughtsLogic.generateMoves(board, piece.color);
          final move = possibleMoves.firstWhereOrNull(
            (m) => m.from == from && m.to == to,
          );
          if (move != null) {
            board = board.applyMove(move);
            print('–•–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –¥–æ—Å–∫–µ');
          } else {
            print('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ö–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è!');
          }
        }

        currentStep++;
        selectedPos = null;
      });
      // –ü–æ—Å–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–¥–∞ ‚Äî –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥ –∏–∑ –∫—É—Ä—Å–∞
      _makeNextMoveFromCourse();
      if (currentStep >= course!.steps.length) {
        setState(() {
          isGameOver = true;
          gameResult = '–ü–æ–±–µ–¥–∞!';
        });
      }
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥
      print('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥!');
      _showMessage('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  void _onSquareTap(Pos pos) {
    print('üéØ _onSquareTap –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: ${pos.x},${pos.y}');
    print('üéØ _onSquareTap: course != null: ${course != null}');
    print('üéØ _onSquareTap: currentStep: $currentStep');
    print('üéØ _onSquareTap: course?.steps.length: ${course?.steps.length}');
    print('üéØ _onSquareTap: isGameOver: $isGameOver');

    if (course == null || currentStep >= course!.steps.length || isGameOver)
      return;

    final piece = board.pieceAt(pos);
    print('–®–∞—à–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${piece?.color} ${piece?.type}');

    if (selectedPos == null) {
      // –í—ã–±–∏—Ä–∞–µ–º —à–∞—à–∫—É
      if (piece != null && piece.color == userColor) {
        print('‚úÖ –í—ã–±–∏—Ä–∞–µ–º —à–∞—à–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${pos.x},${pos.y}');
        setState(() {
          selectedPos = pos;
        });
      } else {
        print('‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —à–∞—à–∫—É: ${piece?.color} != ${userColor}');
      }
    } else {
      // –î–µ–ª–∞–µ–º —Ö–æ–¥
      final from = selectedPos!;
      final to = pos;

      print('üîÑ –î–µ–ª–∞–µ–º —Ö–æ–¥: ${from.x},${from.y} ‚Üí ${to.x},${to.y}');

      if (from != to) {
        // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: (row, col, row, col)
        _onUserMove(from.y, from.x, to.y, to.x);
      } else {
        // –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
        print('‚ùå –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä');
        setState(() {
          selectedPos = null;
        });
      }
    }
  }

  void _makeAutoMove() {
    if (currentStep >= course!.steps.length) return;

    var step = course!.steps[currentStep];
    var from = pdnToPos(step.from);
    var to = pdnToPos(step.to);

    print('=== –ê–í–¢–û–•–û–î ===');
    print('–ê–≤—Ç–æ—Ö–æ–¥: ${from.x},${from.y} ‚Üí ${to.x},${to.y}');
    print('–°—Ç–æ—Ä–æ–Ω–∞: ${step.side}');

    final piece = board.pieceAt(from);
    if (piece != null) {
      final possibleMoves = DraughtsLogic.generateMoves(board, piece.color);
      print('–í–æ–∑–º–æ–∂–Ω—ã–µ –∞–≤—Ç–æ—Ö–æ–¥—ã:');
      for (final m in possibleMoves) {
        print('  ${m.from.x},${m.from.y} ‚Üí ${m.to.x},${m.to.y}');
      }
      final move = possibleMoves.firstWhereOrNull(
        (m) => m.from == from && m.to == to,
      );
      if (move != null) {
        setState(() {
          board = board.applyMove(move);
          currentStep++;
          print('‚úÖ –ê–≤—Ç–æ—Ö–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω, –Ω–æ–≤—ã–π —à–∞–≥: $currentStep');
        });
      } else {
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ö–æ–¥–∞');
      }
    } else {
      print('‚ùå –ù–µ—Ç —à–∞—à–∫–∏ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –∞–≤—Ç–æ—Ö–æ–¥–∞: ${from.x},${from.y}');
    }
    if (currentStep >= course!.steps.length) {
      setState(() {
        isGameOver = true;
        gameResult = '–ü–æ–±–µ–¥–∞!';
      });
    }
  }

  void _toggleHint() {
    setState(() {
      showHint = !showHint;
    });
  }

  void _resetCourse() {
    setState(() {
      board = Board.initial();
      currentStep = 0;
      errorMessage = '';
      isGameOver = false;
      gameResult = '';
      selectedPos = null;
    });
    print('üîÑ –ö—É—Ä—Å —Å–±—Ä–æ—à–µ–Ω');
    // –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ ‚Äî –∞–≤—Ç–æ—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–µ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (course != null && course!.steps.isNotEmpty) {
        final step = course!.steps[0];
        if (_sideToColor(step.side) != userColor) {
          print('üîÑ –î–µ–ª–∞–µ–º –∞–≤—Ç–æ—Ö–æ–¥ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞');
          _makeAutoMove();
        }
      }
    });
  }

  void _showMessage(String message) {
    setState(() {
      errorMessage = message;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const Scaffold(
        backgroundColor: Color(0xFF2B2B2B),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
              SizedBox(height: 20),
              Text(
                '–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–∞...',
                style: TextStyle(color: Colors.white, fontSize: 18),
              ),
            ],
          ),
        ),
      );
    }

    if (course == null) {
      return Scaffold(
        backgroundColor: const Color(0xFF2B2B2B),
        appBar: AppBar(
          title: const Text('–û—à–∏–±–∫–∞'),
          backgroundColor: const Color(0xFF2B2B2B),
        ),
        body: Center(
          child: Text(
            errorMessage,
            style: const TextStyle(color: Colors.red, fontSize: 16),
            textAlign: TextAlign.center,
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: const Color(0xFF2B2B2B),
      appBar: AppBar(
        title: Text('–ö—É—Ä—Å: ${course!.title}'),
        backgroundColor: const Color(0xFF2B2B2B),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _resetCourse,
          ),
        ],
      ),
      body: Column(
        children: [
          Text(
            '–ö—É—Ä—Å: ${course?.title ?? '–ó–∞–≥—Ä—É–∑–∫–∞...'}',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 10),
          Text('–®–∞–≥ ${currentStep + 1} –∏–∑ ${course?.steps.length ?? 0}'),
          SizedBox(height: 20),
          Expanded(
            child:             BoardWidget(
              board: board,
              currentPlayer: PieceColor.white,
              onSquareTap: _onSquareTap,
              selectedPos: selectedPos,
            ),
          ),
          SizedBox(height: 20),
          if (errorMessage.isNotEmpty)
            Container(
              padding: EdgeInsets.all(10),
              margin: EdgeInsets.symmetric(horizontal: 20),
              decoration: BoxDecoration(
                color: errorMessage.contains('–ü—Ä–∞–≤–∏–ª—å–Ω–æ') ||
                        errorMessage.contains('–ü–æ–±–µ–¥–∞')
                    ? Colors.green.withOpacity(0.2)
                    : Colors.red.withOpacity(0.2),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Text(
                errorMessage,
                style: TextStyle(
                  fontSize: 16,
                  color: errorMessage.contains('–ü—Ä–∞–≤–∏–ª—å–Ω–æ') ||
                          errorMessage.contains('–ü–æ–±–µ–¥–∞')
                      ? Colors.green[800]
                      : Colors.red[800],
                ),
                textAlign: TextAlign.center,
              ),
            ),
          if (isGameOver)
            Column(
              children: [
                SizedBox(height: 10),
                Container(
                  padding: EdgeInsets.all(15),
                  margin: EdgeInsets.symmetric(horizontal: 20),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    gameResult,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[800],
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () {
                    setState(() {
                      board = Board.initial();
                      currentStep = 0;
                      isGameOver = false;
                      gameResult = '';
                      errorMessage = '';
                    });
                  },
                  child: Text('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'),
                ),
              ],
            ),
          SizedBox(height: 20),
        ],
      ),
    );
  }
}
